-- Create the database (run this command separately if needed)
-- CREATE DATABASE asset_tracker;

-- Connect to the database

-- Enable UUID extension (optional, but useful for generating unique IDs)
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create Employees table
CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create AssetCategories table
CREATE TABLE asset_categories (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create Assets table
CREATE TABLE assets (
    id SERIAL PRIMARY KEY,
    serial_number VARCHAR(255) NOT NULL UNIQUE,
    make VARCHAR(255),
    model VARCHAR(255),
    purchase_date DATE,
    value DECIMAL(10, 2),
    status VARCHAR(20) CHECK (status IN ('available', 'issued', 'scrapped')) DEFAULT 'available',
    asset_category_id INTEGER REFERENCES asset_categories(id),
    current_user_id INTEGER REFERENCES employees(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create AssetHistory table
CREATE TABLE asset_history (
    id SERIAL PRIMARY KEY,
    asset_id INTEGER REFERENCES assets(id),
    employee_id INTEGER REFERENCES employees(id),
    action VARCHAR(20) CHECK (action IN ('purchased', 'issued', 'returned', 'scrapped')) NOT NULL,
    date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    reason TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for improved query performance
CREATE INDEX idx_assets_status ON assets(status);
CREATE INDEX idx_assets_asset_category_id ON assets(asset_category_id);
CREATE INDEX idx_assets_current_user_id ON assets(current_user_id);
CREATE INDEX idx_asset_history_asset_id ON asset_history(asset_id);
CREATE INDEX idx_asset_history_employee_id ON asset_history(employee_id);

-- Create a function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers to automatically update the updated_at column
CREATE TRIGGER update_employee_modtime
    BEFORE UPDATE ON employees
    FOR EACH ROW
    EXECUTE FUNCTION update_modified_column();

CREATE TRIGGER update_asset_category_modtime
    BEFORE UPDATE ON asset_categories
    FOR EACH ROW
    EXECUTE FUNCTION update_modified_column();

CREATE TRIGGER update_asset_modtime
    BEFORE UPDATE ON assets
    FOR EACH ROW
    EXECUTE FUNCTION update_modified_column();

CREATE TRIGGER update_asset_history_modtime
    BEFORE UPDATE ON asset_history
    FOR EACH ROW
    EXECUTE FUNCTION update_modified_column();

-- Insert some sample data
INSERT INTO employees (name, email) VALUES
    ('John Doe', 'john.doe@example.com'),
    ('Jane Smith', 'jane.smith@example.com');

INSERT INTO asset_categories (name) VALUES
    ('Laptop'),
    ('Mobile Phone'),
    ('Screwdriver'),
    ('Drill Machine');

INSERT INTO assets (serial_number, make, model, purchase_date, value, asset_category_id) VALUES
    ('LT001', 'Dell', 'XPS 13', '2023-01-15', 1200.00, 1),
    ('MP001', 'Apple', 'iPhone 12', '2023-02-20', 800.00, 2),
    ('SD001', 'Stanley', 'Flathead', '2023-03-10', 15.00, 3),
    ('DM001', 'Bosch', 'GSB 500 RE', '2023-04-05', 150.00, 4);

-- Example of issuing an asset
UPDATE assets SET status = 'issued', current_user_id = 1 WHERE id = 1;
INSERT INTO asset_history (asset_id, employee_id, action) VALUES (1, 1, 'issued');